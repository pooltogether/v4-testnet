{
  "address": "0xb38e46EBf90888D621Cde5661D3cC2476d7bCc2e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAToken",
          "name": "_aToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewardsController",
          "name": "_rewardsController",
          "type": "address"
        },
        {
          "internalType": "contract IPoolAddressesProviderRegistry",
          "name": "_poolAddressesProviderRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IAToken",
          "name": "aToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IRewardsController",
          "name": "rewardsController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPoolAddressesProviderRegistry",
          "name": "poolAddressesProviderRegistry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "AaveV3YieldSourceInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "rewardsList",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "claimedAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "DecreasedERC20Allowance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "IncreasedERC20Allowance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "SuppliedTokenTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TransferredERC20",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aToken",
      "outputs": [
        {
          "internalType": "contract IAToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseERC20Allowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseERC20Allowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAddressesProviderRegistry",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProviderRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsController",
      "outputs": [
        {
          "internalType": "contract IRewardsController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "supplyTokenTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0e78860782722e74a6b49ba55ba212c8d5b91a50cd387899551b14388aee036",
  "receipt": {
    "to": null,
    "from": "0x3A791e828fDd420fbE16416efDF509E4b9088Dd4",
    "contractAddress": "0xb38e46EBf90888D621Cde5661D3cC2476d7bCc2e",
    "transactionIndex": 1,
    "gasUsed": "2591747",
    "logsBloom": "0x
    "blockHash": "0xa7e1397e43232b1a3b81d7ef56fa7266bd29225a2b06e2e8b41dad91bf6c9932",
    "transactionHash": "0xf0e78860782722e74a6b49ba55ba212c8d5b91a50cd387899551b14388aee036",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 16408434,
        "transactionHash": "0xf0e78860782722e74a6b49ba55ba212c8d5b91a50cd387899551b14388aee036",
        "address": "0xb38e46EBf90888D621Cde5661D3cC2476d7bCc2e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003a791e828fdd420fbe16416efdf509e4b9088dd4"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa7e1397e43232b1a3b81d7ef56fa7266bd29225a2b06e2e8b41dad91bf6c9932"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16408434,
        "transactionHash": "0xf0e78860782722e74a6b49ba55ba212c8d5b91a50cd387899551b14388aee036",
        "address": "0x3E937B4881CBd500d05EeDAB7BA203f2b7B3f74f",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b38e46ebf90888d621cde5661d3cc2476d7bcc2e",
          "0x000000000000000000000000b47673b7a73d78743aff1487af69dbb5763f00ca"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xa7e1397e43232b1a3b81d7ef56fa7266bd29225a2b06e2e8b41dad91bf6c9932"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16408434,
        "transactionHash": "0xf0e78860782722e74a6b49ba55ba212c8d5b91a50cd387899551b14388aee036",
        "address": "0xb38e46EBf90888D621Cde5661D3cC2476d7bCc2e",
        "topics": [
          "0xb4c0233428c55a68617f46f436f714ada4aebd76cf3d8844a1d76846ed646a86",
          "0x000000000000000000000000a79570641bc9cbc6522aa80e2de03bf9f7fd123a",
          "0x0000000000000000000000003a791e828fdd420fbe16416efdf509e4b9088dd4"
        ],
        "data": "0x00000000000000000000000058cd851c28df05edc7f018b533c0257de57673f700000000000000000000000085e44420b6137bbc75a85cab5c9a3371af976fde00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001b506f6f6c546f676574686572206141766155534443205969656c640000000000000000000000000000000000000000000000000000000000000000000000000b5054614176615553444359000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0xa7e1397e43232b1a3b81d7ef56fa7266bd29225a2b06e2e8b41dad91bf6c9932"
      }
    ],
    "blockNumber": 16408434,
    "cumulativeGasUsed": "4035734",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA79570641bC9cbc6522aA80E2de03bF9F7fd123a",
    "0x58Cd851c28dF05Edc7F018B533C0257DE57673f7",
    "0x85E44420b6137bbc75a85CAB5c9A3371af976FdE",
    "PoolTogether aAvaUSDC Yield",
    "PTaAvaUSDCY",
    6,
    "0x3A791e828fDd420fbE16416efDF509E4b9088Dd4"
  ],
  "numDeployments": 1,
  "solcInputHash": "3f8be40ecc8584ee8d9084aea6842aec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAToken\",\"name\":\"_aToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewardsController\",\"name\":\"_rewardsController\",\"type\":\"address\"},{\"internalType\":\"contract IPoolAddressesProviderRegistry\",\"name\":\"_poolAddressesProviderRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAToken\",\"name\":\"aToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IRewardsController\",\"name\":\"rewardsController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPoolAddressesProviderRegistry\",\"name\":\"poolAddressesProviderRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AaveV3YieldSourceInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardsList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DecreasedERC20Allowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"IncreasedERC20Allowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SuppliedTokenTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TransferredERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"contract IAToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseERC20Allowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseERC20Allowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddressesProviderRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProviderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsController\",\"outputs\":[{\"internalType\":\"contract IRewardsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"supplyTokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract inherits from the ERC20 implementation to keep track of users deposits.\",\"events\":{\"AaveV3YieldSourceInitialized(address,address,address,string,string,uint8,address)\":{\"params\":{\"aToken\":\"Aave aToken address\",\"decimals\":\"Number of decimals the shares (inherited ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.\",\"name\":\"Token name for the underlying ERC20 shares\",\"owner\":\"Owner of this contract\",\"poolAddressesProviderRegistry\":\"Aave poolAddressesProviderRegistry address\",\"rewardsController\":\"Aave rewardsController address\",\"symbol\":\"Token symbol for the underlying ERC20 shares\"}},\"Claimed(address,address,address[],uint256[])\":{\"params\":{\"claimedAmounts\":\"List that contains the claimed amount per reward token\",\"from\":\"Address who claimed the rewards\",\"rewardsList\":\"List of addresses of the reward tokens\",\"to\":\"Address that received the rewards\"}},\"DecreasedERC20Allowance(address,address,uint256,address)\":{\"params\":{\"amount\":\"Amount of `token` to decrease allowance by\",\"from\":\"Address of the caller\",\"spender\":\"Address of the spender\",\"token\":\"Address of the ERC20 token to decrease allowance for\"}},\"IncreasedERC20Allowance(address,address,uint256,address)\":{\"params\":{\"amount\":\"Amount of `token` to increase allowance by\",\"from\":\"Address of the caller\",\"spender\":\"Address of the spender\",\"token\":\"Address of the ERC20 token to increase allowance for\"}},\"RedeemedToken(address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of tokens redeemed\",\"from\":\"Address who redeemed the tokens\",\"shares\":\"Amount of shares burnt\"}},\"SuppliedTokenTo(address,uint256,uint256,address)\":{\"params\":{\"amount\":\"Amount of tokens supplied\",\"from\":\"Address that supplied the tokens\",\"shares\":\"Amount of shares minted to the user\",\"to\":\"Address that received the shares\"}},\"TransferredERC20(address,address,uint256,address)\":{\"params\":{\"amount\":\"Amount of `token` transferred\",\"from\":\"Address of the caller\",\"to\":\"Address of the recipient\",\"token\":\"Address of the ERC20 token transferred\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"balanceOfToken(address)\":{\"params\":{\"_user\":\"Address of the user to get balance of token for\"},\"returns\":{\"_0\":\"The underlying balance of asset tokens.\"}},\"claimOwnership()\":{\"details\":\"This function is only callable by the `_pendingOwner`.\"},\"claimRewards(address)\":{\"details\":\"Only callable by the owner or manager.\",\"params\":{\"_to\":\"Address where the claimed rewards will be sent\"}},\"constructor\":{\"params\":{\"_aToken\":\"Aave aToken address\",\"_name\":\"Token name for the underlying ERC20 shares\",\"_owner\":\"Owner of this contract\",\"_poolAddressesProviderRegistry\":\"Aave poolAddressesProviderRegistry address\",\"_rewardsController\":\"Aave rewardsController address\",\"_symbol\":\"Token symbol for the underlying ERC20 shares\",\"decimals_\":\"Number of decimals the shares (inherited ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.\"}},\"decimals()\":{\"details\":\"This value should be equal to the decimals of the token used to deposit into the pool.\",\"returns\":{\"_0\":\"The number of decimals.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"decreaseERC20Allowance(address,address,uint256)\":{\"details\":\"This function is only callable by the owner or asset manager.Current allowance should be computed off-chain to avoid any underflow.\",\"params\":{\"_amount\":\"Amount of tokens to decrease allowance by\",\"_spender\":\"Address of the spender of the tokens\",\"_token\":\"Address of the ERC20 token to decrease allowance for\"}},\"depositToken()\":{\"returns\":{\"_0\":\"The ERC20 asset token address.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"increaseERC20Allowance(address,address,uint256)\":{\"details\":\"This function is only callable by the owner or asset manager.Allows another contract or address to withdraw funds from the yield source.Current allowance should be computed off-chain to avoid any overflow.\",\"params\":{\"_amount\":\"Amount of tokens to increase allowance by\",\"_spender\":\"Address of the spender of the tokens\",\"_token\":\"Address of the ERC20 token to increase allowance for\"}},\"manager()\":{\"returns\":{\"_0\":\"Current `_manager` address.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pendingOwner()\":{\"returns\":{\"_0\":\"Current `_pendingOwner` address.\"}},\"redeemToken(uint256)\":{\"details\":\"Shares corresponding to the number of tokens withdrawn are burnt from the user's balance.Asset tokens are withdrawn from Aave, then transferred from the yield source to the user's wallet.\",\"params\":{\"_redeemAmount\":\"The amount of asset tokens to be redeemed\"},\"returns\":{\"_0\":\"The actual amount of asset tokens that were redeemed.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setManager(address)\":{\"details\":\"Throws if called by any account other than the owner.\",\"params\":{\"_newManager\":\"New _manager address.\"},\"returns\":{\"_0\":\"Boolean to indicate if the operation was successful or not.\"}},\"supplyTokenTo(uint256,address)\":{\"details\":\"Shares corresponding to the number of tokens supplied are minted to the user's balance.Asset tokens are supplied to the yield source, then deposited into Aave.\",\"params\":{\"_depositAmount\":\"The amount of asset tokens to be supplied\",\"_to\":\"The user whose balance will receive the tokens\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferERC20(address,address,uint256)\":{\"details\":\"This function is only callable by the owner or asset manager.\",\"params\":{\"_amount\":\"Amount of tokens to transfer\",\"_to\":\"Address of the recipient of the tokens\",\"_token\":\"Address of the ERC20 token to transfer\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"Address to transfer ownership to.\"}}},\"stateVariables\":{\"ADDRESSES_PROVIDER_ID\":{\"details\":\"Aave genesis market PoolAddressesProvider's ID.This variable could evolve in the future if we decide to support other markets.\"},\"REFERRAL_CODE\":{\"details\":\"PoolTogether's Aave Referral Code\"}},\"title\":\"Aave V3 Yield Source contract, implementing PoolTogether's generic yield source interface.\",\"version\":1},\"userdoc\":{\"events\":{\"AaveV3YieldSourceInitialized(address,address,address,string,string,uint8,address)\":{\"notice\":\"Emitted when the yield source is initialized.\"},\"Claimed(address,address,address[],uint256[])\":{\"notice\":\"Emitted when Aave rewards have been claimed.\"},\"DecreasedERC20Allowance(address,address,uint256,address)\":{\"notice\":\"Emitted when decreasing allowance of ERC20 tokens other than yield source's aToken.\"},\"IncreasedERC20Allowance(address,address,uint256,address)\":{\"notice\":\"Emitted when increasing allowance of ERC20 tokens other than yield source's aToken.\"},\"RedeemedToken(address,uint256,uint256)\":{\"notice\":\"Emitted when asset tokens are redeemed from the yield source.\"},\"SuppliedTokenTo(address,uint256,uint256,address)\":{\"notice\":\"Emitted when asset tokens are supplied to the yield source.\"},\"TransferredERC20(address,address,uint256,address)\":{\"notice\":\"Emitted when ERC20 tokens other than yield source's aToken are withdrawn from the yield source.\"}},\"kind\":\"user\",\"methods\":{\"aToken()\":{\"notice\":\"Yield-bearing Aave aToken address.\"},\"balanceOfToken(address)\":{\"notice\":\"Returns user total balance (in asset tokens). This includes their deposit and interest.\"},\"claimOwnership()\":{\"notice\":\"Allows the `_pendingOwner` address to finalize the transfer.\"},\"claimRewards(address)\":{\"notice\":\"Claims the accrued rewards for the aToken, accumulating any pending rewards.\"},\"constructor\":{\"notice\":\"Initializes the yield source with Aave aToken.\"},\"decimals()\":{\"notice\":\"Returns the Yield Source ERC20 token decimals.\"},\"decreaseERC20Allowance(address,address,uint256)\":{\"notice\":\"Decrease allowance of ERC20 tokens other than the aTokens held by this contract.\"},\"depositToken()\":{\"notice\":\"Returns the ERC20 asset token used for deposits.\"},\"increaseERC20Allowance(address,address,uint256)\":{\"notice\":\"Increase allowance of ERC20 tokens other than the aTokens held by this contract.\"},\"manager()\":{\"notice\":\"Gets current `_manager`.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"notice\":\"Gets current `_pendingOwner`.\"},\"poolAddressesProviderRegistry()\":{\"notice\":\"Aave poolAddressesProviderRegistry address.\"},\"redeemToken(uint256)\":{\"notice\":\"Redeems asset tokens from the yield source.\"},\"renounceOwnership()\":{\"notice\":\"Renounce ownership of the contract.\"},\"rewardsController()\":{\"notice\":\"Aave RewardsController address.\"},\"setManager(address)\":{\"notice\":\"Set or change of manager.\"},\"supplyTokenTo(uint256,address)\":{\"notice\":\"Supplies asset tokens to the yield source.\"},\"transferERC20(address,address,uint256)\":{\"notice\":\"Transfer ERC20 tokens other than the aTokens held by this contract to the recipient address.\"},\"transferOwnership(address)\":{\"notice\":\"Allows current owner to set the `_pendingOwner` address.\"}},\"notice\":\"Yield Source for a PoolTogether prize pool that generates yield by depositing into Aave V3.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol\":\"AaveV3YieldSource\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6fdde76d62d0772bbf8c579e7990013034509a99abbb661d8b5a8e8c42f7afb5\",\"license\":\"agpl-3.0\"},\"@aave/core-v3/contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\n\\n/**\\n * @title IAToken\\n * @author Aave\\n * @notice Defines the basic interface for an AToken.\\n **/\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @notice Mints `amount` aTokens to `user`\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted aTokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address caller,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @dev In some instances, the mint event could be emitted from a burn transaction\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the aTokens will be burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  function burn(\\n    address from,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @notice Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @notice Transfers the underlying asset to `target`.\\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external;\\n\\n  /**\\n   * @notice Handles the underlying received by the aToken after the transfer has been completed.\\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @notice Allow passing a signed message to approve spending\\n   * @dev implements the permit function as for\\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner The owner of the funds\\n   * @param spender The spender\\n   * @param value The amount\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v Signature param\\n   * @param s Signature param\\n   * @param r Signature param\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @return The address of the underlying asset\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\\n   * @return Address of the Aave treasury\\n   **/\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Get the domain separator for the token\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the nonce for owner.\\n   * @param owner The address of the owner\\n   * @return The nonce of the owner\\n   **/\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb331fb5185ba7051e3db729e7ddc9105c9465e81821997bb4d5eeb9d5c0d5e91\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n **/\\ninterface IAaveIncentivesController {\\n  /**\\n   * @dev Emitted during `handleAction`, `claimRewards` and `claimRewardsOnBehalf`\\n   * @param user The user that accrued rewards\\n   * @param amount The amount of accrued rewards\\n   */\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted during `claimRewards` and `claimRewardsOnBehalf`\\n   * @param user The address that accrued rewards\\n   *\\u00a0@param to The address that will be receiving the rewards\\n   * @param claimer The address that performed the claim\\n   * @param amount The amount of rewards\\n   */\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted during `setClaimer`\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @notice Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index\\n   * @return The emission per second\\n   * @return The last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * LEGACY **************************\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function assets(address asset)\\n    external\\n    view\\n    returns (\\n      uint128,\\n      uint128,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @notice Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @notice Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @notice Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the pool\\n   * @param totalSupply The total supply of the asset in the pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @notice Returns the total of rewards of a user, already accrued + not yet accrued\\n   * @param assets The assets to accumulate rewards for\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Claims reward for a user, on the assets of the pool, accumulating the pending rewards\\n   * @param assets The assets to accumulate rewards for\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Claims reward for a user on its behalf, on the assets of the pool, accumulating the pending rewards.\\n   * @dev The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The assets to accumulate rewards for\\n   * @param amount The amount of rewards to claim\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the unclaimed rewards of the user\\n   * @param user The address of the user\\n   * @return The unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the user index for a specific asset\\n   * @param user The address of the user\\n   * @param asset The asset to incentivize\\n   * @return The user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice for backward compatibility with previous implementation of the Incentives controller\\n   * @return The address of the reward token\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @notice for backward compatibility with previous implementation of the Incentives controller\\n   * @return The precision used in the incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x317481a878a176f915be0f9cc890ff1c12ca2a03af58efa3d6c8b7394af4dad9\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @author Aave\\n * @notice Interface for the initialize function on AToken\\n **/\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals The decimals of the underlying\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the aToken\\n   * @param pool The pool contract that is initializing this contract\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x92c8f74894cd42416cef5f9eb0c4e978d3056c2ab3cfbf7eebf13f38becca49b\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The rate mode that the user wants to swap to: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0x71a2d4598a4d7f7f34188e2114d7cc2208a372a2d9361c42c744f6d48e7a72cd\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x73185cd3b952eb691bbf2344b3f7a35cf8b67b33c39275e52e12b80436ea1d5c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IPoolAddressesProviderRegistry\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool Addresses Provider Registry.\\n **/\\ninterface IPoolAddressesProviderRegistry {\\n  /**\\n   * @dev Emitted when a new AddressesProvider is registered.\\n   * @param addressesProvider The address of the registered PoolAddressesProvider\\n   * @param id The id of the registered PoolAddressesProvider\\n   */\\n  event AddressesProviderRegistered(address indexed addressesProvider, uint256 indexed id);\\n\\n  /**\\n   * @dev Emitted when an AddressesProvider is unregistered.\\n   * @param addressesProvider The address of the unregistered PoolAddressesProvider\\n   * @param id The id of the unregistered PoolAddressesProvider\\n   */\\n  event AddressesProviderUnregistered(address indexed addressesProvider, uint256 indexed id);\\n\\n  /**\\n   * @notice Returns the list of registered addresses providers\\n   * @return The list of addresses providers\\n   **/\\n  function getAddressesProvidersList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the id of a registered PoolAddressesProvider\\n   * @param addressesProvider The address of the PoolAddressesProvider\\n   * @return The id of the PoolAddressesProvider or 0 if is not registered\\n   */\\n  function getAddressesProviderIdByAddress(address addressesProvider)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of a registered PoolAddressesProvider\\n   * @param id The id of the market\\n   * @return The address of the PoolAddressesProvider with the given id or zero address if it is not registered\\n   */\\n  function getAddressesProviderAddressById(uint256 id) external view returns (address);\\n\\n  /**\\n   * @notice Registers an addresses provider\\n   * @dev The PoolAddressesProvider must not already be registered in the registry\\n   * @dev The id must not be used by an already registered PoolAddressesProvider\\n   * @param provider The address of the new PoolAddressesProvider\\n   * @param id The id for the new PoolAddressesProvider, referring to the market it belongs to\\n   **/\\n  function registerAddressesProvider(address provider, uint256 id) external;\\n\\n  /**\\n   * @notice Removes an addresses provider from the list of registered addresses providers\\n   * @param provider The PoolAddressesProvider address\\n   **/\\n  function unregisterAddressesProvider(address provider) external;\\n}\\n\",\"keccak256\":\"0xf9833165c9cf7b87980ca1e35a27c92de6da9348d1b5b84ed2c1cdba5393c01d\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaledbalance token.\\n **/\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted scaled balance tokens\\n   * @param value The amount being minted (user entered amount + balance increase from interest)\\n   * @param balanceIncrease The increase in balance since the last action of the user\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after scaled balance tokens are burned\\n   * @param from The address from which the scaled tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in balance since the last action of the user\\n   * @param index The next liquidity index of the reserve\\n   **/\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   **/\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x368f899be97302c87b484bcdb80dd346f5e87404c3500b531bb49f1c05555928\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0xf3acc235689aae1094d33bfdf90e60b0c3ae1f12c5f095b8cffb69bc6880765c\",\"license\":\"BUSL-1.1\"},\"@aave/periphery-v3/contracts/misc/interfaces/IEACAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\ninterface IEACAggregatorProxy {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\\n}\\n\",\"keccak256\":\"0xc6e0656205d26ce3ad1c14f647ee70ced21640522d06ef380ed7c35dad7c22e3\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {IRewardsDistributor} from './IRewardsDistributor.sol';\\nimport {RewardsDistributorTypes} from '../libraries/RewardsDistributorTypes.sol';\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\n\\ninterface IRewardsController is IRewardsDistributor {\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed reward,\\n    address indexed to,\\n    address claimer,\\n    uint256 amount\\n  );\\n\\n  event TransferStrategyInstalled(address indexed reward, address indexed transferStrategy);\\n\\n  event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n   * @param reward The address of the reward token\\n   * @param transferStrategy The address of the TransferStrategy logic contract\\n   */\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\\n\\n  /**\\n   * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n   * @notice At the moment of reward configuration, the Incentives Controller performs\\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n   * This check is enforced for integrators to be able to show incentives at\\n   * the current Aave UI without the need to setup an external price registry\\n   * @param reward The address of the reward to set the price aggregator\\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n   */\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n  /**\\n   * @dev Get the price aggregator oracle address\\n   * @param reward The address of the reward\\n   * @return The price oracle of the reward\\n   */\\n  function getRewardOracle(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\n   * @param reward The address of the reward\\n   * @return The address of the TransferStrategy contract\\n   */\\n  function getTransferStrategy(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n   * @param config The assets configuration input, the list of structs contains the following fields:\\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n   *   uint256 totalSupply: The total supply of the asset to incentivize\\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n   *   address asset: The asset address to incentivize\\n   *   address reward: The reward token address\\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n   */\\n  function configureAssets(RewardsDistributorTypes.RewardsConfigInput[] memory config) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   * @param userBalance The user balance of the asset\\n   * @param totalSupply The total supply of the asset\\n   **/\\n  function handleAction(\\n    address user,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Claims reward for an user to the desired address, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @param reward Address of the reward token\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @param reward Address of the reward token\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param amount Amount of rewards to claim\\n   * @param reward Address of the reward token\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsToSelf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims all rewards for an user to the desired address, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens and claimedAmounts, the list that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n   **/\\n  function claimAllRewards(address[] calldata assets, address to)\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all rewards for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens and claimedAmounts, the list that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsOnBehalf(\\n    address[] calldata assets,\\n    address user,\\n    address to\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @return rewardsList List of addresses of the reward tokens and claimedAmounts, the list that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsToSelf(address[] calldata assets)\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n}\\n\",\"keccak256\":\"0x8ca49a640f8ec94d4fcac7b0b5e7921446dfa55e367dab8e69235af9e9d813ad\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {RewardsDistributorTypes} from '../libraries/RewardsDistributorTypes.sol';\\n\\ninterface IRewardsDistributor {\\n  event AssetConfigUpdated(\\n    address indexed asset,\\n    address indexed reward,\\n    uint256 emission,\\n    uint256 distributionEnd\\n  );\\n  event AssetIndexUpdated(address indexed asset, address indexed reward, uint256 index);\\n  event UserIndexUpdated(\\n    address indexed user,\\n    address indexed asset,\\n    address indexed reward,\\n    uint256 index\\n  );\\n\\n  event RewardsAccrued(address indexed user, address indexed reward, uint256 amount);\\n\\n  /**\\n   * @dev Sets the end date for the distribution\\n   * @param asset The asset to incentivize\\n   * @param reward The reward token that incentives the asset\\n   * @param distributionEnd The end date of the incentivization, in unix time format\\n   **/\\n  function setDistributionEnd(\\n    address asset,\\n    address reward,\\n    uint32 distributionEnd\\n  ) external;\\n\\n  /**\\n   * @dev Gets the end date for the distribution\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The timestamp with the end of the distribution, in unix time format\\n   **/\\n  function getDistributionEnd(address asset, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the index of an user on a reward distribution\\n   * @param user Address of the user\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The current user asset index in storage, not including new distributions\\n   **/\\n  function getUserAssetData(\\n    address user,\\n    address asset,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The asset index, the emission per second, the last updated timestamp and the distribution end timestamp\\n   **/\\n  function getRewardsData(address asset, address reward)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Returns the list of available reward token addresses of an incentivized asset\\n   * @param asset The incentivized asset\\n   * @return List of rewards addresses of the input asset\\n   **/\\n  function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the list of available reward addresses\\n   * @return List of rewards supported in this contract\\n   **/\\n  function getRewardsList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns a single rewards balance of an user from contract storage state, not including virtually accrued rewards since last distribution.\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return Unclaimed rewards, from storage\\n   **/\\n  function getUserUnclaimedRewardsFromStorage(address user, address reward)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Returns a single rewards balance of an user, including virtually accrued and unrealized claimable rewards.\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return The rewards amount\\n   **/\\n  function getUserRewardsBalance(\\n    address[] calldata assets,\\n    address user,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a list all rewards of an user, including already accrued and unrealized claimable rewards\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @return The function returns a Tuple of rewards list and the unclaimed rewards list\\n   **/\\n  function getAllUserRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n\\n  /**\\n   * @dev Returns the decimals of an asset to calculate the distribution delta\\n   * @param asset The address to retrieve decimals saved at storage\\n   * @return The decimals of an underlying asset\\n   */\\n  function getAssetDecimals(address asset) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x57560546d42f51c78cc1b798a876176d70180c0c575ecde9ab82148874e7b3d6\",\"license\":\"agpl-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\ninterface ITransferStrategyBase {\\n  event EmergencyWithdrawal(\\n    address indexed caller,\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n   * @param to Account to transfer rewards\\n   * @param reward Address of the reward token\\n   * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n   * @return Returns true bool if transfer logic succeeds\\n   */\\n  function performTransfer(\\n    address to,\\n    address reward,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @return Returns the address of the Incentives Controller\\n   */\\n  function getIncentivesController() external view returns (address);\\n\\n  /**\\n   * @return Returns the address of the Rewards admin\\n   */\\n  function getRewardsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n   * @param token Address of the token to withdraw funds from this contract\\n   * @param to Address of the recipient of the withdrawal\\n   * @param amount Amount of the withdrawal\\n   */\\n  function emergencyWithdrawal(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x693a03ea4ff01373ef102c6a558bcfa8e54a6be6e53de7a022b923f2108cd250\",\"license\":\"AGPL-3.0\"},\"@aave/periphery-v3/contracts/rewards/libraries/RewardsDistributorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.10;\\n\\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\n\\nlibrary RewardsDistributorTypes {\\n  struct RewardsConfigInput {\\n    uint88 emissionPerSecond;\\n    uint256 totalSupply;\\n    uint32 distributionEnd;\\n    address asset;\\n    address reward;\\n    ITransferStrategyBase transferStrategy;\\n    IEACAggregatorProxy rewardOracle;\\n  }\\n\\n  struct UserAssetStatsInput {\\n    address underlyingAsset;\\n    uint256 userBalance;\\n    uint256 totalSupply;\\n  }\\n}\\n\",\"keccak256\":\"0x7a2f6c15424658999954efa4a7a03448c9bc6dcd29f24e0ce9241747eef2dce5\",\"license\":\"agpl-3.0\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport { IAToken } from \\\"@aave/core-v3/contracts/interfaces/IAToken.sol\\\";\\nimport { IPool } from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\nimport { IPoolAddressesProvider } from \\\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\\\";\\nimport { IPoolAddressesProviderRegistry } from \\\"@aave/core-v3/contracts/interfaces/IPoolAddressesProviderRegistry.sol\\\";\\nimport { IRewardsController } from \\\"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol\\\";\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { Manageable, Ownable } from \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\nimport { IYieldSource } from \\\"@pooltogether/yield-source-interface/contracts/IYieldSource.sol\\\";\\n\\n/**\\n * @title Aave V3 Yield Source contract, implementing PoolTogether's generic yield source interface.\\n * @dev This contract inherits from the ERC20 implementation to keep track of users deposits.\\n * @notice Yield Source for a PoolTogether prize pool that generates yield by depositing into Aave V3.\\n */\\ncontract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  /* ============ Events ============ */\\n\\n  /**\\n   * @notice Emitted when the yield source is initialized.\\n   * @param aToken Aave aToken address\\n   * @param rewardsController Aave rewardsController address\\n   * @param poolAddressesProviderRegistry Aave poolAddressesProviderRegistry address\\n   * @param name Token name for the underlying ERC20 shares\\n   * @param symbol Token symbol for the underlying ERC20 shares\\n   * @param decimals Number of decimals the shares (inherited ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.\\n   * @param owner Owner of this contract\\n   */\\n  event AaveV3YieldSourceInitialized(\\n    IAToken indexed aToken,\\n    IRewardsController rewardsController,\\n    IPoolAddressesProviderRegistry poolAddressesProviderRegistry,\\n    string name,\\n    string symbol,\\n    uint8 decimals,\\n    address indexed owner\\n  );\\n\\n  /**\\n   * @notice Emitted when asset tokens are supplied to the yield source.\\n   * @param from Address that supplied the tokens\\n   * @param shares Amount of shares minted to the user\\n   * @param amount Amount of tokens supplied\\n   * @param to Address that received the shares\\n   */\\n  event SuppliedTokenTo(address indexed from, uint256 shares, uint256 amount, address indexed to);\\n\\n  /**\\n   * @notice Emitted when asset tokens are redeemed from the yield source.\\n   * @param from Address who redeemed the tokens\\n   * @param shares Amount of shares burnt\\n   * @param amount Amount of tokens redeemed\\n   */\\n  event RedeemedToken(address indexed from, uint256 shares, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when Aave rewards have been claimed.\\n   * @param from Address who claimed the rewards\\n   * @param to Address that received the rewards\\n   * @param rewardsList List of addresses of the reward tokens\\n   * @param claimedAmounts List that contains the claimed amount per reward token\\n   */\\n  event Claimed(\\n    address indexed from,\\n    address indexed to,\\n    address[] rewardsList,\\n    uint256[] claimedAmounts\\n  );\\n\\n  /**\\n   * @notice Emitted when decreasing allowance of ERC20 tokens other than yield source's aToken.\\n   * @param from Address of the caller\\n   * @param spender Address of the spender\\n   * @param amount Amount of `token` to decrease allowance by\\n   * @param token Address of the ERC20 token to decrease allowance for\\n   */\\n  event DecreasedERC20Allowance(\\n    address indexed from,\\n    address indexed spender,\\n    uint256 amount,\\n    IERC20 indexed token\\n  );\\n\\n  /**\\n   * @notice Emitted when increasing allowance of ERC20 tokens other than yield source's aToken.\\n   * @param from Address of the caller\\n   * @param spender Address of the spender\\n   * @param amount Amount of `token` to increase allowance by\\n   * @param token Address of the ERC20 token to increase allowance for\\n   */\\n  event IncreasedERC20Allowance(\\n    address indexed from,\\n    address indexed spender,\\n    uint256 amount,\\n    IERC20 indexed token\\n  );\\n\\n  /**\\n   * @notice Emitted when ERC20 tokens other than yield source's aToken are withdrawn from the yield source.\\n   * @param from Address of the caller\\n   * @param to Address of the recipient\\n   * @param amount Amount of `token` transferred\\n   * @param token Address of the ERC20 token transferred\\n   */\\n  event TransferredERC20(\\n    address indexed from,\\n    address indexed to,\\n    uint256 amount,\\n    IERC20 indexed token\\n  );\\n\\n  /* ============ Variables ============ */\\n\\n  /// @notice Yield-bearing Aave aToken address.\\n  IAToken public immutable aToken;\\n\\n  /// @notice Aave RewardsController address.\\n  IRewardsController public immutable rewardsController;\\n\\n  /// @notice Aave poolAddressesProviderRegistry address.\\n  IPoolAddressesProviderRegistry public immutable poolAddressesProviderRegistry;\\n\\n  /// @notice Underlying asset token address.\\n  address private immutable _tokenAddress;\\n\\n  /// @notice Underlying asset unit.\\n  uint256 private immutable _tokenUnit;\\n\\n  /// @notice ERC20 token decimals.\\n  uint8 private immutable _decimals;\\n\\n  /**\\n   * @dev Aave genesis market PoolAddressesProvider's ID.\\n   * @dev This variable could evolve in the future if we decide to support other markets.\\n   */\\n  uint256 private constant ADDRESSES_PROVIDER_ID = uint256(0);\\n\\n  /// @dev PoolTogether's Aave Referral Code\\n  uint16 private constant REFERRAL_CODE = uint16(188);\\n\\n  /* ============ Constructor ============ */\\n\\n  /**\\n   * @notice Initializes the yield source with Aave aToken.\\n   * @param _aToken Aave aToken address\\n   * @param _rewardsController Aave rewardsController address\\n   * @param _poolAddressesProviderRegistry Aave poolAddressesProviderRegistry address\\n   * @param _name Token name for the underlying ERC20 shares\\n   * @param _symbol Token symbol for the underlying ERC20 shares\\n   * @param decimals_ Number of decimals the shares (inherited ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.\\n   * @param _owner Owner of this contract\\n   */\\n  constructor(\\n    IAToken _aToken,\\n    IRewardsController _rewardsController,\\n    IPoolAddressesProviderRegistry _poolAddressesProviderRegistry,\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 decimals_,\\n    address _owner\\n  ) Ownable(_owner) ERC20(_name, _symbol) ReentrancyGuard() {\\n    require(_owner != address(0), \\\"AaveV3YS/owner-not-zero-address\\\");\\n    require(address(_aToken) != address(0), \\\"AaveV3YS/aToken-not-zero-address\\\");\\n    require(decimals_ > 0, \\\"AaveV3YS/decimals-gt-zero\\\");\\n    require(address(_rewardsController) != address(0), \\\"AaveV3YS/RC-not-zero-address\\\");\\n    require(address(_poolAddressesProviderRegistry) != address(0), \\\"AaveV3YS/PR-not-zero-address\\\");\\n\\n    aToken = _aToken;\\n    _decimals = decimals_;\\n    _tokenUnit = 10**decimals_;\\n    _tokenAddress = address(_aToken.UNDERLYING_ASSET_ADDRESS());\\n    rewardsController = _rewardsController;\\n    poolAddressesProviderRegistry = _poolAddressesProviderRegistry;\\n\\n    // Approve once for max amount\\n    IERC20(_tokenAddress).safeApprove(address(_pool()), type(uint256).max);\\n\\n    emit AaveV3YieldSourceInitialized(\\n      _aToken,\\n      _rewardsController,\\n      _poolAddressesProviderRegistry,\\n      _name,\\n      _symbol,\\n      decimals_,\\n      _owner\\n    );\\n  }\\n\\n  /* ============ External Functions ============ */\\n\\n  /**\\n   * @notice Returns user total balance (in asset tokens). This includes their deposit and interest.\\n   * @param _user Address of the user to get balance of token for\\n   * @return The underlying balance of asset tokens.\\n   */\\n  function balanceOfToken(address _user) external view override returns (uint256) {\\n    return _sharesToToken(balanceOf(_user), _pricePerShare());\\n  }\\n\\n  /**\\n   * @notice Returns the ERC20 asset token used for deposits.\\n   * @return The ERC20 asset token address.\\n   */\\n  function depositToken() public view override returns (address) {\\n    return _tokenAddress;\\n  }\\n\\n  /**\\n   * @notice Returns the Yield Source ERC20 token decimals.\\n   * @dev This value should be equal to the decimals of the token used to deposit into the pool.\\n   * @return The number of decimals.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @notice Supplies asset tokens to the yield source.\\n   * @dev Shares corresponding to the number of tokens supplied are minted to the user's balance.\\n   * @dev Asset tokens are supplied to the yield source, then deposited into Aave.\\n   * @param _depositAmount The amount of asset tokens to be supplied\\n   * @param _to The user whose balance will receive the tokens\\n   */\\n  function supplyTokenTo(uint256 _depositAmount, address _to) external override nonReentrant {\\n    uint256 _shares = _tokenToShares(_depositAmount, _pricePerShare());\\n    _requireSharesGTZero(_shares);\\n\\n    IERC20(_tokenAddress).safeTransferFrom(msg.sender, address(this), _depositAmount);\\n    _pool().supply(_tokenAddress, _depositAmount, address(this), REFERRAL_CODE);\\n\\n    _mint(_to, _shares);\\n\\n    emit SuppliedTokenTo(msg.sender, _shares, _depositAmount, _to);\\n  }\\n\\n  /**\\n   * @notice Redeems asset tokens from the yield source.\\n   * @dev Shares corresponding to the number of tokens withdrawn are burnt from the user's balance.\\n   * @dev Asset tokens are withdrawn from Aave, then transferred from the yield source to the user's wallet.\\n   * @param _redeemAmount The amount of asset tokens to be redeemed\\n   * @return The actual amount of asset tokens that were redeemed.\\n   */\\n  function redeemToken(uint256 _redeemAmount) external override nonReentrant returns (uint256) {\\n    uint256 _shares = _tokenToShares(_redeemAmount, _pricePerShare());\\n    _requireSharesGTZero(_shares);\\n\\n    _burn(msg.sender, _shares);\\n\\n    IERC20 _assetToken = IERC20(_tokenAddress);\\n    uint256 _beforeBalance = _assetToken.balanceOf(address(this));\\n    _pool().withdraw(_tokenAddress, _redeemAmount, address(this));\\n\\n    uint256 _balanceDiff;\\n\\n    unchecked {\\n      _balanceDiff = _assetToken.balanceOf(address(this)) - _beforeBalance;\\n    }\\n\\n    _assetToken.safeTransfer(msg.sender, _balanceDiff);\\n\\n    emit RedeemedToken(msg.sender, _shares, _redeemAmount);\\n    return _balanceDiff;\\n  }\\n\\n  /**\\n   * @notice Claims the accrued rewards for the aToken, accumulating any pending rewards.\\n   * @dev Only callable by the owner or manager.\\n   * @param _to Address where the claimed rewards will be sent\\n   */\\n  function claimRewards(address _to) external onlyManagerOrOwner {\\n    require(_to != address(0), \\\"AaveV3YS/payee-not-zero-address\\\");\\n\\n    address[] memory _assets = new address[](1);\\n    _assets[0] = address(aToken);\\n\\n    (address[] memory _rewardsList, uint256[] memory _claimedAmounts) = rewardsController\\n      .claimAllRewards(_assets, _to);\\n\\n    emit Claimed(msg.sender, _to, _rewardsList, _claimedAmounts);\\n  }\\n\\n  /**\\n   * @notice Decrease allowance of ERC20 tokens other than the aTokens held by this contract.\\n   * @dev This function is only callable by the owner or asset manager.\\n   * @dev Current allowance should be computed off-chain to avoid any underflow.\\n   * @param _token Address of the ERC20 token to decrease allowance for\\n   * @param _spender Address of the spender of the tokens\\n   * @param _amount Amount of tokens to decrease allowance by\\n   */\\n  function decreaseERC20Allowance(\\n    IERC20 _token,\\n    address _spender,\\n    uint256 _amount\\n  ) external onlyManagerOrOwner {\\n    _requireNotAToken(address(_token));\\n    _token.safeDecreaseAllowance(_spender, _amount);\\n    emit DecreasedERC20Allowance(msg.sender, _spender, _amount, _token);\\n  }\\n\\n  /**\\n   * @notice Increase allowance of ERC20 tokens other than the aTokens held by this contract.\\n   * @dev This function is only callable by the owner or asset manager.\\n   * @dev Allows another contract or address to withdraw funds from the yield source.\\n   * @dev Current allowance should be computed off-chain to avoid any overflow.\\n   * @param _token Address of the ERC20 token to increase allowance for\\n   * @param _spender Address of the spender of the tokens\\n   * @param _amount Amount of tokens to increase allowance by\\n   */\\n  function increaseERC20Allowance(\\n    IERC20 _token,\\n    address _spender,\\n    uint256 _amount\\n  ) external onlyManagerOrOwner {\\n    _requireNotAToken(address(_token));\\n    _token.safeIncreaseAllowance(_spender, _amount);\\n    emit IncreasedERC20Allowance(msg.sender, _spender, _amount, _token);\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 tokens other than the aTokens held by this contract to the recipient address.\\n   * @dev This function is only callable by the owner or asset manager.\\n   * @param _token Address of the ERC20 token to transfer\\n   * @param _to Address of the recipient of the tokens\\n   * @param _amount Amount of tokens to transfer\\n   */\\n  function transferERC20(\\n    IERC20 _token,\\n    address _to,\\n    uint256 _amount\\n  ) external onlyManagerOrOwner {\\n    _requireNotAToken(address(_token));\\n    _token.safeTransfer(_to, _amount);\\n    emit TransferredERC20(msg.sender, _to, _amount, _token);\\n  }\\n\\n  /* ============ Internal Functions ============ */\\n\\n  /**\\n   * @notice Checks that the amount of shares is greater than zero.\\n   * @param _shares Amount of shares to check\\n   */\\n  function _requireSharesGTZero(uint256 _shares) internal pure {\\n    require(_shares > 0, \\\"AaveV3YS/shares-gt-zero\\\");\\n  }\\n\\n  /**\\n   * @notice Checks that the token address passed is not the aToken address.\\n   * @param _token Address of the ERC20 token to check\\n   */\\n  function _requireNotAToken(address _token) internal view {\\n    require(_token != address(aToken), \\\"AaveV3YS/forbid-aToken-change\\\");\\n  }\\n\\n  /**\\n   * @notice Calculates the price of a full share.\\n   * @dev We use this calculation to ensure that the price per share can't be manipulated.\\n   * @return The current price per share\\n   */\\n  function _pricePerShare() internal view returns (uint256) {\\n    uint256 _supply = totalSupply();\\n\\n    // pricePerShare = (token * yieldSourceBalanceOfAToken) / totalSupply\\n    return _supply == 0 ? _tokenUnit : (_tokenUnit * aToken.balanceOf(address(this))) / _supply;\\n  }\\n\\n  /**\\n   * @notice Calculates the number of shares that should be minted or burnt when a user deposit or withdraw.\\n   * @param _tokens Amount of asset tokens\\n   * @param _fullShare Price of a full share\\n   * @return Number of shares.\\n   */\\n  function _tokenToShares(uint256 _tokens, uint256 _fullShare) internal view returns (uint256) {\\n    // shares = (tokens * totalSupply) / yieldSourceBalanceOfAToken\\n    return _tokens == 0 ? _tokens : (_tokens * _tokenUnit) / _fullShare;\\n  }\\n\\n  /**\\n   * @notice Calculates the number of asset tokens a user has in the yield source.\\n   * @param _shares Amount of shares\\n   * @param _fullShare Price of a full share\\n   * @return Number of asset tokens.\\n   */\\n  function _sharesToToken(uint256 _shares, uint256 _fullShare) internal view returns (uint256) {\\n    // tokens = (shares * yieldSourceBalanceOfAToken) / totalSupply\\n    return _shares == 0 ? _shares : (_shares * _fullShare) / _tokenUnit;\\n  }\\n\\n  /**\\n   * @notice Retrieves Aave Pool address.\\n   * @return A reference to Pool interface.\\n   */\\n  function _pool() internal view returns (IPool) {\\n    return\\n      IPool(\\n        IPoolAddressesProvider(\\n          poolAddressesProviderRegistry.getAddressesProvidersList()[ADDRESSES_PROVIDER_ID]\\n        ).getPool()\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x984d667a293543aba2df481c7a85e1a89a2c0df9200f275031e6fba47b86a3a3\",\"license\":\"GPL-3.0\"},\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Abstract manageable contract that can be inherited by other contracts\\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\\n * there is an owner and a manager that can be granted exclusive access to specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\n * the manager.\\n */\\nabstract contract Manageable is Ownable {\\n    address private _manager;\\n\\n    /**\\n     * @dev Emitted when `_manager` has been changed.\\n     * @param previousManager previous `_manager` address.\\n     * @param newManager new `_manager` address.\\n     */\\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Gets current `_manager`.\\n     * @return Current `_manager` address.\\n     */\\n    function manager() public view virtual returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @dev Throws if called by any account other than the owner.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function setManager(address _newManager) external onlyOwner returns (bool) {\\n        return _setManager(_newManager);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function _setManager(address _newManager) private returns (bool) {\\n        address _previousManager = _manager;\\n\\n        require(_newManager != _previousManager, \\\"Manageable/existing-manager-address\\\");\\n\\n        _manager = _newManager;\\n\\n        emit ManagerTransferred(_previousManager, _newManager);\\n        return true;\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(manager() == msg.sender, \\\"Manageable/caller-not-manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager or the owner.\\n     */\\n    modifier onlyManagerOrOwner() {\\n        require(manager() == msg.sender || owner() == msg.sender, \\\"Manageable/caller-not-manager-or-owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdd8ac008df192c6aa4df83e7037ab090970fda38e1f9fd712bc0ab5e0485fc04\",\"license\":\"GPL-3.0\"},\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Abstract ownable contract that can be inherited by other contracts\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @dev Emitted when `_pendingOwner` has been changed.\\n     * @param pendingOwner new `_pendingOwner` address.\\n     */\\n    event OwnershipOffered(address indexed pendingOwner);\\n\\n    /**\\n     * @dev Emitted when `_owner` has been changed.\\n     * @param previousOwner previous `_owner` address.\\n     * @param newOwner new `_owner` address.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\\n     * @param _initialOwner Initial owner of the contract.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Gets current `_pendingOwner`.\\n     * @return Current `_pendingOwner` address.\\n     */\\n    function pendingOwner() external view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Renounce ownership of the contract.\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n    * @notice Allows current owner to set the `_pendingOwner` address.\\n    * @param _newOwner Address to transfer ownership to.\\n    */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable/pendingOwner-not-zero-address\\\");\\n\\n        _pendingOwner = _newOwner;\\n\\n        emit OwnershipOffered(_newOwner);\\n    }\\n\\n    /**\\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\\n    * @dev This function is only callable by the `_pendingOwner`.\\n    */\\n    function claimOwnership() external onlyPendingOwner {\\n        _setOwner(_pendingOwner);\\n        _pendingOwner = address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Internal function to set the `_owner` of the contract.\\n     * @param _newOwner New `_owner` address.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable/caller-not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the `pendingOwner`.\\n    */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable/caller-not-pendingOwner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfd0fd374812c8af45f2633cc7cc4811ccb7bad0a3902a43aded35939eb4a00d1\",\"license\":\"GPL-3.0\"},\"@pooltogether/yield-source-interface/contracts/IYieldSource.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Defines the functions used to interact with a yield source.  The Prize Pool inherits this contract.\\n/// @notice Prize Pools subclasses need to implement this interface so that yield can be generated.\\ninterface IYieldSource {\\n    /// @notice Returns the ERC20 asset token used for deposits.\\n    /// @return The ERC20 asset token address.\\n    function depositToken() external view returns (address);\\n\\n    /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\n    /// @return The underlying balance of asset tokens.\\n    function balanceOfToken(address addr) external returns (uint256);\\n\\n    /// @notice Supplies tokens to the yield source.  Allows assets to be supplied on other user's behalf using the `to` param.\\n    /// @param amount The amount of asset tokens to be supplied.  Denominated in `depositToken()` as above.\\n    /// @param to The user whose balance will receive the tokens\\n    function supplyTokenTo(uint256 amount, address to) external;\\n\\n    /// @notice Redeems tokens from the yield source.\\n    /// @param amount The amount of asset tokens to withdraw.  Denominated in `depositToken()` as above.\\n    /// @return The actual amount of interst bearing tokens that were redeemed.\\n    function redeemToken(uint256 amount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x659c59f7b0a4cac6ce4c46a8ccec1d8d7ab14aa08451c0d521804fec9ccc95f1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806395d89b4111610104578063c89039c5116100a2578063e30c397811610071578063e30c39781461044f578063ef5cfb8c14610460578063f2ca6b9114610473578063f2fde38b1461049a57600080fd5b8063c89039c5146103ca578063cad1b113146103f0578063d0ebdbe714610403578063dd62ed3e1461041657600080fd5b8063a457c2d7116100de578063a457c2d71461037e578063a9059cbb14610391578063b29fd859146103a4578063b99152d0146103b757600080fd5b806395d89b411461033c5780639db5dbe414610344578063a0c1f15e1461035757600080fd5b8063481c6a751161017157806370a082311161014b57806370a08231146102e7578063715018a61461031057806387a6eeef146103185780638da5cb5b1461032b57600080fd5b8063481c6a75146102915780634e71e0c8146102b65780636bb65f53146102c057600080fd5b806318160ddd116101ad57806318160ddd1461023257806323b872dd1461023a578063313ce5671461024d578063395093511461027e57600080fd5b8063013054c2146101d457806306fdde03146101fa578063095ea7b31461020f575b600080fd5b6101e76101e23660046124c3565b6104ad565b6040519081526020015b60405180910390f35b61020261074d565b6040516101f19190612508565b61022261021d366004612550565b6107df565b60405190151581526020016101f1565b6002546101e7565b61022261024836600461257c565b6107f7565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101f1565b61022261028c366004612550565b61081d565b6007546001600160a01b03165b6040516001600160a01b0390911681526020016101f1565b6102be61085c565b005b61029e7f000000000000000000000000000000000000000000000000000000000000000081565b6101e76102f53660046125bd565b6001600160a01b031660009081526020819052604090205490565b6102be6108ea565b6102be6103263660046125da565b61095f565b6005546001600160a01b031661029e565b610202610b11565b6102be61035236600461257c565b610b20565b61029e7f000000000000000000000000000000000000000000000000000000000000000081565b61022261038c366004612550565b610c35565b61022261039f366004612550565b610cea565b6102be6103b236600461257c565b610cf8565b6101e76103c53660046125bd565b610e00565b7f000000000000000000000000000000000000000000000000000000000000000061029e565b6102be6103fe36600461257c565b610e30565b6102226104113660046125bd565b610f38565b6101e761042436600461260a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6006546001600160a01b031661029e565b6102be61046e3660046125bd565b610fac565b61029e7f000000000000000000000000000000000000000000000000000000000000000081565b6102be6104a83660046125bd565b61120e565b6000600260085414156105075760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600855600061051f8361051a6114e2565b6115e1565b905061052a8161162a565b610534338261167d565b6040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190612638565b90506105cb611802565b6040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820188905230604483015291909116906369328dec906064016020604051808303816000875af115801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190612638565b506040516370a0823160e01b815230600482015260009082906001600160a01b038516906370a0823190602401602060405180830381865afa1580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190612638565b0390506107046001600160a01b038416338361190a565b604080518581526020810188905233917f5c9b0a8fe13a826ca676f5ad4f98c747b5086beb79ab58589b8211b62fa32fb9910160405180910390a2600160085595945050505050565b60606003805461075c90612651565b80601f016020809104026020016040519081016040528092919081815260200182805461078890612651565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6000336107ed818585611953565b5060019392505050565b600033610805858285611aab565b610810858585611b3d565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906107ed90829086906108579087906126a2565b611953565b6006546001600160a01b031633146108b65760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e65720060448201526064016104fe565b6006546108cb906001600160a01b0316611d54565b6006805473ffffffffffffffffffffffffffffffffffffffff19169055565b336108fd6005546001600160a01b031690565b6001600160a01b0316146109535760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016104fe565b61095d6000611d54565b565b600260085414156109b25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104fe565b600260085560006109c58361051a6114e2565b90506109d08161162a565b610a056001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086611db3565b610a0d611802565b6040517f617ba0370000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905230604483015260bc6064830152919091169063617ba03790608401600060405180830381600087803b158015610a9f57600080fd5b505af1158015610ab3573d6000803e3d6000fd5b50505050610ac18282611e04565b60408051828152602081018590526001600160a01b0384169133917fdef5cc95ad9b1c65c586d0fce815ec764b575719636edf58ff2553ae6f110452910160405180910390a35050600160085550565b60606004805461075c90612651565b33610b336007546001600160a01b031690565b6001600160a01b03161480610b61575033610b566005546001600160a01b031690565b6001600160a01b0316145b610bbc5760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201526516b7bbb732b960d11b60648201526084016104fe565b610bc583611ee3565b610bd96001600160a01b038416838361190a565b826001600160a01b0316826001600160a01b0316336001600160a01b03167f29fcb7bb954d37295343e742bab21760748bdba4e026e4469a8100183996913884604051610c2891815260200190565b60405180910390a4505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015610cd25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016104fe565b610cdf8286868403611953565b506001949350505050565b6000336107ed818585611b3d565b33610d0b6007546001600160a01b031690565b6001600160a01b03161480610d39575033610d2e6005546001600160a01b031690565b6001600160a01b0316145b610d945760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201526516b7bbb732b960d11b60648201526084016104fe565b610d9d83611ee3565b610db16001600160a01b0384168383611f65565b826001600160a01b0316826001600160a01b0316336001600160a01b03167fb950f35bebfc57c18eb18b27fa6295af1f3f33aaf918012ecb50ab2238ef4dae84604051610c2891815260200190565b6001600160a01b038116600090815260208190526040812054610e2a90610e256114e2565b612017565b92915050565b33610e436007546001600160a01b031690565b6001600160a01b03161480610e71575033610e666005546001600160a01b031690565b6001600160a01b0316145b610ecc5760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201526516b7bbb732b960d11b60648201526084016104fe565b610ed583611ee3565b610ee96001600160a01b038416838361204a565b826001600160a01b0316826001600160a01b0316336001600160a01b03167fbde560dd72188a103801403edfa1655a8453dc173e65955668846925d687afe784604051610c2891815260200190565b600033610f4d6005546001600160a01b031690565b6001600160a01b031614610fa35760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016104fe565b610e2a82612171565b33610fbf6007546001600160a01b031690565b6001600160a01b03161480610fed575033610fe26005546001600160a01b031690565b6001600160a01b0316145b6110485760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201526516b7bbb732b960d11b60648201526084016104fe565b6001600160a01b03811661109e5760405162461bcd60e51b815260206004820152601f60248201527f41617665563359532f70617965652d6e6f742d7a65726f2d616464726573730060448201526064016104fe565b604080516001808252818301909252600091602080830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106110f4576110f46126d0565b6001600160a01b0392831660209182029290920101526040517fbb492bf500000000000000000000000000000000000000000000000000000000815260009182917f00000000000000000000000000000000000000000000000000000000000000009091169063bb492bf590611170908690889060040161272a565b6000604051808303816000875af115801561118f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111b7919081019061281e565b91509150836001600160a01b0316336001600160a01b03167f16b67bee17bd6fd679caacc21ffa680d8cf251cbf879eb3b6ef84716100c15ff84846040516112009291906128d9565b60405180910390a350505050565b336112216005546001600160a01b031690565b6001600160a01b0316146112775760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016104fe565b6001600160a01b0381166112f35760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016104fe565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b8015806113c45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561139e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c29190612638565b155b6114365760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016104fe565b6040516001600160a01b0383166024820152604481018290526114c690849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261225d565b505050565b60606114da8484600085612342565b949350505050565b6000806114ee60025490565b905080156115b9576040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561155c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115809190612638565b6115aa907f0000000000000000000000000000000000000000000000000000000000000000612930565b6115b4919061294f565b6115db565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6000821561162357816116147f000000000000000000000000000000000000000000000000000000000000000085612930565b61161e919061294f565b610816565b5090919050565b6000811161167a5760405162461bcd60e51b815260206004820152601760248201527f41617665563359532f7368617265732d67742d7a65726f00000000000000000060448201526064016104fe565b50565b6001600160a01b0382166116f95760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104fe565b6001600160a01b038216600090815260208190526040902054818110156117885760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016104fe565b6001600160a01b03831660009081526020819052604081208383039055600280548492906117b7908490612971565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663365ccbbf6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611862573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261188a9190810190612988565b60008151811061189c5761189c6126d0565b60200260200101516001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190591906129bd565b905090565b6040516001600160a01b0383166024820152604481018290526114c69084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611462565b6001600160a01b0383166119ce5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104fe565b6001600160a01b038216611a4a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016104fe565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114611b375781811015611b2a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104fe565b611b378484848403611953565b50505050565b6001600160a01b038316611bb95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016104fe565b6001600160a01b038216611c355760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016104fe565b6001600160a01b03831660009081526020819052604090205481811015611cc45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016104fe565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611cfb9084906126a2565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d4791815260200190565b60405180910390a3611b37565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b379085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611462565b6001600160a01b038216611e5a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104fe565b8060026000828254611e6c91906126a2565b90915550506001600160a01b03821660009081526020819052604081208054839290611e999084906126a2565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561167a5760405162461bcd60e51b815260206004820152601d60248201527f41617665563359532f666f726269642d61546f6b656e2d6368616e676500000060448201526064016104fe565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fda9190612638565b611fe491906126a2565b6040516001600160a01b038516602482015260448101829052909150611b3790859063095ea7b360e01b90606401611462565b60008215611623577f00000000000000000000000000000000000000000000000000000000000000006116148385612930565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa15801561209a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120be9190612638565b9050818110156121365760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f000000000000000000000000000000000000000000000060648201526084016104fe565b6040516001600160a01b0384166024820152828203604482018190529061216a90869063095ea7b360e01b90606401611462565b5050505050565b6007546000906001600160a01b039081169083168114156121fa5760405162461bcd60e51b815260206004820152602360248201527f4d616e61676561626c652f6578697374696e672d6d616e616765722d6164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016104fe565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b60006122b2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114cb9092919063ffffffff16565b8051909150156114c657808060200190518101906122d091906129da565b6114c65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104fe565b6060824710156123ba5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104fe565b6001600160a01b0385163b6124115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104fe565b600080866001600160a01b0316858760405161242d91906129fc565b60006040518083038185875af1925050503d806000811461246a576040519150601f19603f3d011682016040523d82523d6000602084013e61246f565b606091505b509150915061247f82828661248a565b979650505050505050565b60608315612499575081610816565b8251156124a95782518084602001fd5b8160405162461bcd60e51b81526004016104fe9190612508565b6000602082840312156124d557600080fd5b5035919050565b60005b838110156124f75781810151838201526020016124df565b83811115611b375750506000910152565b60208152600082518060208401526125278160408501602087016124dc565b601f01601f19169190910160400192915050565b6001600160a01b038116811461167a57600080fd5b6000806040838503121561256357600080fd5b823561256e8161253b565b946020939093013593505050565b60008060006060848603121561259157600080fd5b833561259c8161253b565b925060208401356125ac8161253b565b929592945050506040919091013590565b6000602082840312156125cf57600080fd5b81356108168161253b565b600080604083850312156125ed57600080fd5b8235915060208301356125ff8161253b565b809150509250929050565b6000806040838503121561261d57600080fd5b82356126288161253b565b915060208301356125ff8161253b565b60006020828403121561264a57600080fd5b5051919050565b600181811c9082168061266557607f821691505b6020821081141561268657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156126b5576126b561268c565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b8381101561271f5781516001600160a01b0316875295820195908201906001016126fa565b509495945050505050565b60408152600061273d60408301856126e6565b90506001600160a01b03831660208301529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561277e5761277e6126ba565b604052919050565b600067ffffffffffffffff8211156127a0576127a06126ba565b5060051b60200190565b600082601f8301126127bb57600080fd5b815160206127d06127cb83612786565b612755565b82815260059290921b840181019181810190868411156127ef57600080fd5b8286015b848110156128135780516128068161253b565b83529183019183016127f3565b509695505050505050565b6000806040838503121561283157600080fd5b825167ffffffffffffffff8082111561284957600080fd5b612855868387016127aa565b935060209150818501518181111561286c57600080fd5b85019050601f8101861361287f57600080fd5b805161288d6127cb82612786565b81815260059190911b820183019083810190888311156128ac57600080fd5b928401925b828410156128ca578351825292840192908401906128b1565b80955050505050509250929050565b6040815260006128ec60408301856126e6565b82810360208481019190915284518083528582019282019060005b8181101561292357845183529383019391830191600101612907565b5090979650505050505050565b600081600019048311821515161561294a5761294a61268c565b500290565b60008261296c57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156129835761298361268c565b500390565b60006020828403121561299a57600080fd5b815167ffffffffffffffff8111156129b157600080fd5b6114da848285016127aa565b6000602082840312156129cf57600080fd5b81516108168161253b565b6000602082840312156129ec57600080fd5b8151801515811461081657600080fd5b60008251612a0e8184602087016124dc565b919091019291505056fea264697066735822122001678a6d5b3f9e3967fdcccf7c48c62e66edf673614cfe47c040d2dbb2a3849764736f6c634300080a0033",
  "devdoc": {
    "details": "This contract inherits from the ERC20 implementation to keep track of users deposits.",
    "events": {
      "AaveV3YieldSourceInitialized(address,address,address,string,string,uint8,address)": {
        "params": {
          "aToken": "Aave aToken address",
          "decimals": "Number of decimals the shares (inherited ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.",
          "name": "Token name for the underlying ERC20 shares",
          "owner": "Owner of this contract",
          "poolAddressesProviderRegistry": "Aave poolAddressesProviderRegistry address",
          "rewardsController": "Aave rewardsController address",
          "symbol": "Token symbol for the underlying ERC20 shares"
        }
      },
      "Claimed(address,address,address[],uint256[])": {
        "params": {
          "claimedAmounts": "List that contains the claimed amount per reward token",
          "from": "Address who claimed the rewards",
          "rewardsList": "List of addresses of the reward tokens",
          "to": "Address that received the rewards"
        }
      },
      "DecreasedERC20Allowance(address,address,uint256,address)": {
        "params": {
          "amount": "Amount of `token` to decrease allowance by",
          "from": "Address of the caller",
          "spender": "Address of the spender",
          "token": "Address of the ERC20 token to decrease allowance for"
        }
      },
      "IncreasedERC20Allowance(address,address,uint256,address)": {
        "params": {
          "amount": "Amount of `token` to increase allowance by",
          "from": "Address of the caller",
          "spender": "Address of the spender",
          "token": "Address of the ERC20 token to increase allowance for"
        }
      },
      "RedeemedToken(address,uint256,uint256)": {
        "params": {
          "amount": "Amount of tokens redeemed",
          "from": "Address who redeemed the tokens",
          "shares": "Amount of shares burnt"
        }
      },
      "SuppliedTokenTo(address,uint256,uint256,address)": {
        "params": {
          "amount": "Amount of tokens supplied",
          "from": "Address that supplied the tokens",
          "shares": "Amount of shares minted to the user",
          "to": "Address that received the shares"
        }
      },
      "TransferredERC20(address,address,uint256,address)": {
        "params": {
          "amount": "Amount of `token` transferred",
          "from": "Address of the caller",
          "to": "Address of the recipient",
          "token": "Address of the ERC20 token transferred"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "balanceOfToken(address)": {
        "params": {
          "_user": "Address of the user to get balance of token for"
        },
        "returns": {
          "_0": "The underlying balance of asset tokens."
        }
      },
      "claimOwnership()": {
        "details": "This function is only callable by the `_pendingOwner`."
      },
      "claimRewards(address)": {
        "details": "Only callable by the owner or manager.",
        "params": {
          "_to": "Address where the claimed rewards will be sent"
        }
      },
      "constructor": {
        "params": {
          "_aToken": "Aave aToken address",
          "_name": "Token name for the underlying ERC20 shares",
          "_owner": "Owner of this contract",
          "_poolAddressesProviderRegistry": "Aave poolAddressesProviderRegistry address",
          "_rewardsController": "Aave rewardsController address",
          "_symbol": "Token symbol for the underlying ERC20 shares",
          "decimals_": "Number of decimals the shares (inherited ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares."
        }
      },
      "decimals()": {
        "details": "This value should be equal to the decimals of the token used to deposit into the pool.",
        "returns": {
          "_0": "The number of decimals."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "decreaseERC20Allowance(address,address,uint256)": {
        "details": "This function is only callable by the owner or asset manager.Current allowance should be computed off-chain to avoid any underflow.",
        "params": {
          "_amount": "Amount of tokens to decrease allowance by",
          "_spender": "Address of the spender of the tokens",
          "_token": "Address of the ERC20 token to decrease allowance for"
        }
      },
      "depositToken()": {
        "returns": {
          "_0": "The ERC20 asset token address."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "increaseERC20Allowance(address,address,uint256)": {
        "details": "This function is only callable by the owner or asset manager.Allows another contract or address to withdraw funds from the yield source.Current allowance should be computed off-chain to avoid any overflow.",
        "params": {
          "_amount": "Amount of tokens to increase allowance by",
          "_spender": "Address of the spender of the tokens",
          "_token": "Address of the ERC20 token to increase allowance for"
        }
      },
      "manager()": {
        "returns": {
          "_0": "Current `_manager` address."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pendingOwner()": {
        "returns": {
          "_0": "Current `_pendingOwner` address."
        }
      },
      "redeemToken(uint256)": {
        "details": "Shares corresponding to the number of tokens withdrawn are burnt from the user's balance.Asset tokens are withdrawn from Aave, then transferred from the yield source to the user's wallet.",
        "params": {
          "_redeemAmount": "The amount of asset tokens to be redeemed"
        },
        "returns": {
          "_0": "The actual amount of asset tokens that were redeemed."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setManager(address)": {
        "details": "Throws if called by any account other than the owner.",
        "params": {
          "_newManager": "New _manager address."
        },
        "returns": {
          "_0": "Boolean to indicate if the operation was successful or not."
        }
      },
      "supplyTokenTo(uint256,address)": {
        "details": "Shares corresponding to the number of tokens supplied are minted to the user's balance.Asset tokens are supplied to the yield source, then deposited into Aave.",
        "params": {
          "_depositAmount": "The amount of asset tokens to be supplied",
          "_to": "The user whose balance will receive the tokens"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferERC20(address,address,uint256)": {
        "details": "This function is only callable by the owner or asset manager.",
        "params": {
          "_amount": "Amount of tokens to transfer",
          "_to": "Address of the recipient of the tokens",
          "_token": "Address of the ERC20 token to transfer"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "params": {
          "_newOwner": "Address to transfer ownership to."
        }
      }
    },
    "stateVariables": {
      "ADDRESSES_PROVIDER_ID": {
        "details": "Aave genesis market PoolAddressesProvider's ID.This variable could evolve in the future if we decide to support other markets."
      },
      "REFERRAL_CODE": {
        "details": "PoolTogether's Aave Referral Code"
      }
    },
    "title": "Aave V3 Yield Source contract, implementing PoolTogether's generic yield source interface.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AaveV3YieldSourceInitialized(address,address,address,string,string,uint8,address)": {
        "notice": "Emitted when the yield source is initialized."
      },
      "Claimed(address,address,address[],uint256[])": {
        "notice": "Emitted when Aave rewards have been claimed."
      },
      "DecreasedERC20Allowance(address,address,uint256,address)": {
        "notice": "Emitted when decreasing allowance of ERC20 tokens other than yield source's aToken."
      },
      "IncreasedERC20Allowance(address,address,uint256,address)": {
        "notice": "Emitted when increasing allowance of ERC20 tokens other than yield source's aToken."
      },
      "RedeemedToken(address,uint256,uint256)": {
        "notice": "Emitted when asset tokens are redeemed from the yield source."
      },
      "SuppliedTokenTo(address,uint256,uint256,address)": {
        "notice": "Emitted when asset tokens are supplied to the yield source."
      },
      "TransferredERC20(address,address,uint256,address)": {
        "notice": "Emitted when ERC20 tokens other than yield source's aToken are withdrawn from the yield source."
      }
    },
    "kind": "user",
    "methods": {
      "aToken()": {
        "notice": "Yield-bearing Aave aToken address."
      },
      "balanceOfToken(address)": {
        "notice": "Returns user total balance (in asset tokens). This includes their deposit and interest."
      },
      "claimOwnership()": {
        "notice": "Allows the `_pendingOwner` address to finalize the transfer."
      },
      "claimRewards(address)": {
        "notice": "Claims the accrued rewards for the aToken, accumulating any pending rewards."
      },
      "constructor": {
        "notice": "Initializes the yield source with Aave aToken."
      },
      "decimals()": {
        "notice": "Returns the Yield Source ERC20 token decimals."
      },
      "decreaseERC20Allowance(address,address,uint256)": {
        "notice": "Decrease allowance of ERC20 tokens other than the aTokens held by this contract."
      },
      "depositToken()": {
        "notice": "Returns the ERC20 asset token used for deposits."
      },
      "increaseERC20Allowance(address,address,uint256)": {
        "notice": "Increase allowance of ERC20 tokens other than the aTokens held by this contract."
      },
      "manager()": {
        "notice": "Gets current `_manager`."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "notice": "Gets current `_pendingOwner`."
      },
      "poolAddressesProviderRegistry()": {
        "notice": "Aave poolAddressesProviderRegistry address."
      },
      "redeemToken(uint256)": {
        "notice": "Redeems asset tokens from the yield source."
      },
      "renounceOwnership()": {
        "notice": "Renounce ownership of the contract."
      },
      "rewardsController()": {
        "notice": "Aave RewardsController address."
      },
      "setManager(address)": {
        "notice": "Set or change of manager."
      },
      "supplyTokenTo(uint256,address)": {
        "notice": "Supplies asset tokens to the yield source."
      },
      "transferERC20(address,address,uint256)": {
        "notice": "Transfer ERC20 tokens other than the aTokens held by this contract to the recipient address."
      },
      "transferOwnership(address)": {
        "notice": "Allows current owner to set the `_pendingOwner` address."
      }
    },
    "notice": "Yield Source for a PoolTogether prize pool that generates yield by depositing into Aave V3.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2910,
        "contract": "@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol:AaveV3YieldSource",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2916,
        "contract": "@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol:AaveV3YieldSource",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2918,
        "contract": "@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol:AaveV3YieldSource",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2920,
        "contract": "@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol:AaveV3YieldSource",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2922,
        "contract": "@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol:AaveV3YieldSource",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 8350,
        "contract": "@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol:AaveV3YieldSource",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8352,
        "contract": "@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol:AaveV3YieldSource",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8248,
        "contract": "@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol:AaveV3YieldSource",
        "label": "_manager",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2865,
        "contract": "@pooltogether/aave-v3-yield-source/contracts/AaveV3YieldSource.sol:AaveV3YieldSource",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}